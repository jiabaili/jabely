<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
       default-autowire="byName">

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://120.26.112.59:3306/jabely"/>
        <!-- &&rewriteBatchedStatements=true&failOverReadOnly=false&socketTimeout=12000&characterEncoding=gbk -->
        <property name="connectionProperties" value="connectTimeout=1000;autoReconnect=true;characterEncoding=utf8;characterSetResults=utf8;"/>
        <property name="username" value="jabely"/>
        <property name="password" value="jabely"/>
        <!-- 连接池启动时创建的初始化连接数量默认为0 -->
        <property name="initialSize" value="1"/>
        <!-- 连接池中可同时连接的最大的连接数（默认值为8，调整为20，高峰单机器在20并发左右，自己根据应用场景定) -->
        <property name="maxActive" value="20"/>
        <!-- 连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制
        （默认为8个，maxIdle不能设置太小，因为假如在高负载的情况下，连接的打开时间比关闭的时间快，会引起连接池中idle的个数 上升超过maxIdle，而造成频繁的连接销毁和创建，
        类似于jvm参数中的Xmx设置) -->
        <property name="maxIdle" value="20"/>
        <!-- 连接池中最小的空闲的连接数，低于这个数量会被创建新的连接
        （默认为0，调整为3，该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大，因为在机器很空闲的时候，也会创建低于minidle个数的连接，
        类似于jvm参数中的Xmn设置） -->
        <property name="minIdle" value="3"/>
        <!-- 最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待
        （默认为无限，调整为60000ms，避免因线程池不够用，而导致请求被无限制挂起） -->
        <property name="maxWait" value="60000"/>
        <!-- 超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收（默认为false，调整为true)
            如果开启了removeAbandoned，当getNumIdle() < 2) and (getNumActive() > getMaxActive() - 3)时被触发
            举例当maxActive=20, 活动连接为18,空闲连接为1时可以触发"removeAbandoned".但是活动连接只有在没有被使用的时间超 过"removeAbandonedTimeout"时才被回收
            代码未在finally释放connection ,　不过我们都用sqlmapClientTemplate，底层都有链接释放的过程
            遇到数据库死锁。以前遇到过后端存储过程做了锁表操作，导致前台集群中连接池全都被block住，后续的业务处理因为拿不到链接所有都处理失败了
         -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超过时间限制，回收没有用(废弃)的连接（默认为 300秒，调整为180） -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- dbcp的链接validate配置 start -->
        <!-- 关注的重点，GenericObjectPool中针对pool管理，起了一个Evict的TimerTask定时线程进行控制(可通过设置参数timeBetweenEvictionRunsMillis>0)
            定时对线程池中的链接进行validateObject校验，对无效的链接进行关闭后，会调用ensureMinIdle，适当建立链接保证最小的minIdle连接数 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 设置的Evict线程的时间，单位ms，大于0才会开启evict检查线程 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <!-- 检查的sql -->
        <property name="validationQuery" value="select now()"/>
        <property name="validationQueryTimeout" value="1" />
        <!-- 每次检查链接的数量，建议设置和maxIdle一样大，这样每次可以有效检查所有的链接 -->
        <property name="numTestsPerEvictionRun" value="20"/>
        <!-- 进行borrowObject进行处理时，对拿到的connection进行validateObject校验 -->
        <property name="testOnBorrow" value="false"/>
        <!-- 进行returnObject对返回的connection进行validateObject校验 -->
        <property name="testOnReturn" value="false"/>
    </bean>
</beans>